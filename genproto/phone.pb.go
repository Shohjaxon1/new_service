// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: phone.proto

package phone

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Phone struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PhoneName            string   `protobuf:"bytes,2,opt,name=phone_name,json=phoneName,proto3" json:"phone_name"`
	Color                string   `protobuf:"bytes,3,opt,name=color,proto3" json:"color"`
	Price                string   `protobuf:"bytes,4,opt,name=price,proto3" json:"price"`
	Ram                  int32    `protobuf:"varint,5,opt,name=ram,proto3" json:"ram"`
	Memory               int32    `protobuf:"varint,6,opt,name=memory,proto3" json:"memory"`
	CreatedUp            string   `protobuf:"bytes,7,opt,name=created_up,json=createdUp,proto3" json:"created_up"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Phone) Reset()         { *m = Phone{} }
func (m *Phone) String() string { return proto.CompactTextString(m) }
func (*Phone) ProtoMessage()    {}
func (*Phone) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0e585c54dbe5137, []int{0}
}
func (m *Phone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Phone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Phone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Phone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Phone.Merge(m, src)
}
func (m *Phone) XXX_Size() int {
	return m.Size()
}
func (m *Phone) XXX_DiscardUnknown() {
	xxx_messageInfo_Phone.DiscardUnknown(m)
}

var xxx_messageInfo_Phone proto.InternalMessageInfo

func (m *Phone) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Phone) GetPhoneName() string {
	if m != nil {
		return m.PhoneName
	}
	return ""
}

func (m *Phone) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Phone) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Phone) GetRam() int32 {
	if m != nil {
		return m.Ram
	}
	return 0
}

func (m *Phone) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Phone) GetCreatedUp() string {
	if m != nil {
		return m.CreatedUp
	}
	return ""
}

func (m *Phone) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type GetByIdRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByIdRequest) Reset()         { *m = GetByIdRequest{} }
func (m *GetByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetByIdRequest) ProtoMessage()    {}
func (*GetByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0e585c54dbe5137, []int{1}
}
func (m *GetByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByIdRequest.Merge(m, src)
}
func (m *GetByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByIdRequest proto.InternalMessageInfo

func (m *GetByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetAllRequest struct {
	Page                 string   `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	Limit                string   `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllRequest) Reset()         { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()    {}
func (*GetAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0e585c54dbe5137, []int{2}
}
func (m *GetAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRequest.Merge(m, src)
}
func (m *GetAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRequest proto.InternalMessageInfo

func (m *GetAllRequest) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

func (m *GetAllRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

type GetByPhoneNameRequest struct {
	PhoneName            string   `protobuf:"bytes,1,opt,name=phone_name,json=phoneName,proto3" json:"phone_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByPhoneNameRequest) Reset()         { *m = GetByPhoneNameRequest{} }
func (m *GetByPhoneNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetByPhoneNameRequest) ProtoMessage()    {}
func (*GetByPhoneNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0e585c54dbe5137, []int{3}
}
func (m *GetByPhoneNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByPhoneNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByPhoneNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByPhoneNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByPhoneNameRequest.Merge(m, src)
}
func (m *GetByPhoneNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetByPhoneNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByPhoneNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByPhoneNameRequest proto.InternalMessageInfo

func (m *GetByPhoneNameRequest) GetPhoneName() string {
	if m != nil {
		return m.PhoneName
	}
	return ""
}

type AllPhones struct {
	Phone                []*Phone `protobuf:"bytes,1,rep,name=phone,proto3" json:"phone"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllPhones) Reset()         { *m = AllPhones{} }
func (m *AllPhones) String() string { return proto.CompactTextString(m) }
func (*AllPhones) ProtoMessage()    {}
func (*AllPhones) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0e585c54dbe5137, []int{4}
}
func (m *AllPhones) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPhones) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPhones.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPhones) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPhones.Merge(m, src)
}
func (m *AllPhones) XXX_Size() int {
	return m.Size()
}
func (m *AllPhones) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPhones.DiscardUnknown(m)
}

var xxx_messageInfo_AllPhones proto.InternalMessageInfo

func (m *AllPhones) GetPhone() []*Phone {
	if m != nil {
		return m.Phone
	}
	return nil
}

func init() {
	proto.RegisterType((*Phone)(nil), "phone.Phone")
	proto.RegisterType((*GetByIdRequest)(nil), "phone.GetByIdRequest")
	proto.RegisterType((*GetAllRequest)(nil), "phone.GetAllRequest")
	proto.RegisterType((*GetByPhoneNameRequest)(nil), "phone.GetByPhoneNameRequest")
	proto.RegisterType((*AllPhones)(nil), "phone.AllPhones")
}

func init() { proto.RegisterFile("phone.proto", fileDescriptor_c0e585c54dbe5137) }

var fileDescriptor_c0e585c54dbe5137 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6a, 0xe2, 0x50,
	0x14, 0x86, 0xe7, 0x46, 0x13, 0xc7, 0xa3, 0x23, 0x72, 0xd1, 0x99, 0x8b, 0xcc, 0x84, 0x10, 0x5c,
	0xb8, 0x19, 0x67, 0x70, 0x60, 0x60, 0x60, 0x36, 0xda, 0x82, 0x74, 0x53, 0x24, 0xc5, 0x4d, 0x37,
	0x92, 0x9a, 0x43, 0x1b, 0x48, 0x4c, 0x1a, 0xaf, 0x05, 0xdf, 0xa4, 0xaf, 0xd0, 0x37, 0x29, 0x5d,
	0xf5, 0x11, 0x8a, 0x7d, 0x91, 0x92, 0x73, 0xaf, 0xb5, 0xc9, 0xa2, 0x74, 0x77, 0xff, 0xff, 0x3f,
	0x27, 0x97, 0xff, 0xbb, 0x81, 0x46, 0x7a, 0x95, 0xac, 0x70, 0x98, 0x66, 0x89, 0x4c, 0xb8, 0x49,
	0xc2, 0x7d, 0x60, 0x60, 0xce, 0xf2, 0x13, 0x6f, 0x81, 0x11, 0x06, 0x82, 0x39, 0x6c, 0x50, 0xf7,
	0x8c, 0x30, 0xe0, 0x3f, 0x00, 0x68, 0x64, 0xb1, 0xf2, 0x63, 0x14, 0x06, 0xf9, 0x75, 0x72, 0x4e,
	0xfd, 0x18, 0x79, 0x07, 0xcc, 0x65, 0x12, 0x25, 0x99, 0xa8, 0x50, 0xa2, 0x44, 0xee, 0xa6, 0x59,
	0xb8, 0x44, 0x51, 0x55, 0x2e, 0x09, 0xde, 0x86, 0x4a, 0xe6, 0xc7, 0xc2, 0x74, 0xd8, 0xc0, 0xf4,
	0xf2, 0x23, 0xff, 0x0a, 0x56, 0x8c, 0x71, 0x92, 0x6d, 0x85, 0x45, 0xa6, 0x56, 0xf9, 0xa5, 0xcb,
	0x0c, 0x7d, 0x89, 0xc1, 0x62, 0x93, 0x8a, 0x9a, 0xba, 0x54, 0x3b, 0xf3, 0x34, 0x8f, 0x37, 0x69,
	0x40, 0xb1, 0x2f, 0xc5, 0x67, 0x15, 0x6b, 0x67, 0x2c, 0x5d, 0x07, 0x5a, 0x53, 0x94, 0x93, 0xed,
	0x49, 0xe0, 0xe1, 0xf5, 0x06, 0xd7, 0xb2, 0x5c, 0xca, 0xfd, 0x07, 0x5f, 0xa6, 0x28, 0xc7, 0x51,
	0xb4, 0x1f, 0xe0, 0x50, 0x4d, 0xfd, 0x4b, 0xd4, 0x23, 0x74, 0xce, 0x4b, 0x44, 0x61, 0x1c, 0x4a,
	0x5d, 0x5a, 0x09, 0xf7, 0x2f, 0x74, 0xe9, 0xe3, 0xb3, 0x3d, 0x82, 0xfd, 0x27, 0x8a, 0xa0, 0x58,
	0x09, 0x94, 0xfb, 0x0b, 0xea, 0xe3, 0x28, 0xa2, 0xad, 0x35, 0x77, 0x41, 0x71, 0x17, 0xcc, 0xa9,
	0x0c, 0x1a, 0xa3, 0xe6, 0x50, 0x3d, 0x09, 0xa5, 0x9e, 0x8a, 0x46, 0x77, 0x06, 0x34, 0xc9, 0x38,
	0xc3, 0xec, 0x26, 0xc7, 0xd7, 0x07, 0xeb, 0x88, 0x10, 0xf0, 0xc2, 0x7c, 0xaf, 0xa0, 0xf8, 0x10,
	0x6a, 0xba, 0x3c, 0xef, 0xea, 0xa0, 0x08, 0xa3, 0x34, 0xff, 0x5f, 0xc3, 0x7a, 0xed, 0xc3, 0xbf,
	0xbf, 0x5d, 0x2b, 0xd7, 0x2c, 0x6d, 0xff, 0x06, 0x4b, 0x81, 0xe4, 0x9d, 0xc3, 0xd6, 0x81, 0x6b,
	0xaf, 0xad, 0xdd, 0x43, 0xf5, 0x3e, 0x58, 0x73, 0x7a, 0xa9, 0x77, 0x5b, 0xfc, 0x04, 0xeb, 0x18,
	0x23, 0x94, 0xf8, 0xa1, 0x12, 0x93, 0x6f, 0xf7, 0x3b, 0x9b, 0x3d, 0xee, 0x6c, 0xf6, 0xb4, 0xb3,
	0xd9, 0xed, 0xb3, 0xfd, 0xe9, 0x5c, 0x41, 0xbc, 0xb0, 0xe8, 0x2f, 0xff, 0xf3, 0x12, 0x00, 0x00,
	0xff, 0xff, 0xa0, 0xb3, 0x16, 0xa8, 0xf4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PhoneServiceClient is the client API for PhoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhoneServiceClient interface {
	Create(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*Phone, error)
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Phone, error)
	GetByPhoneName(ctx context.Context, in *GetByPhoneNameRequest, opts ...grpc.CallOption) (*Phone, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*AllPhones, error)
	Update(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*Phone, error)
	Delete(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Phone, error)
}

type phoneServiceClient struct {
	cc *grpc.ClientConn
}

func NewPhoneServiceClient(cc *grpc.ClientConn) PhoneServiceClient {
	return &phoneServiceClient{cc}
}

func (c *phoneServiceClient) Create(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*Phone, error) {
	out := new(Phone)
	err := c.cc.Invoke(ctx, "/phone.PhoneService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Phone, error) {
	out := new(Phone)
	err := c.cc.Invoke(ctx, "/phone.PhoneService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) GetByPhoneName(ctx context.Context, in *GetByPhoneNameRequest, opts ...grpc.CallOption) (*Phone, error) {
	out := new(Phone)
	err := c.cc.Invoke(ctx, "/phone.PhoneService/GetByPhoneName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*AllPhones, error) {
	out := new(AllPhones)
	err := c.cc.Invoke(ctx, "/phone.PhoneService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) Update(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*Phone, error) {
	out := new(Phone)
	err := c.cc.Invoke(ctx, "/phone.PhoneService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) Delete(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Phone, error) {
	out := new(Phone)
	err := c.cc.Invoke(ctx, "/phone.PhoneService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneServiceServer is the server API for PhoneService service.
type PhoneServiceServer interface {
	Create(context.Context, *Phone) (*Phone, error)
	GetById(context.Context, *GetByIdRequest) (*Phone, error)
	GetByPhoneName(context.Context, *GetByPhoneNameRequest) (*Phone, error)
	GetAll(context.Context, *GetAllRequest) (*AllPhones, error)
	Update(context.Context, *Phone) (*Phone, error)
	Delete(context.Context, *GetByIdRequest) (*Phone, error)
}

// UnimplementedPhoneServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPhoneServiceServer struct {
}

func (*UnimplementedPhoneServiceServer) Create(ctx context.Context, req *Phone) (*Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPhoneServiceServer) GetById(ctx context.Context, req *GetByIdRequest) (*Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedPhoneServiceServer) GetByPhoneName(ctx context.Context, req *GetByPhoneNameRequest) (*Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPhoneName not implemented")
}
func (*UnimplementedPhoneServiceServer) GetAll(ctx context.Context, req *GetAllRequest) (*AllPhones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedPhoneServiceServer) Update(ctx context.Context, req *Phone) (*Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPhoneServiceServer) Delete(ctx context.Context, req *GetByIdRequest) (*Phone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPhoneServiceServer(s *grpc.Server, srv PhoneServiceServer) {
	s.RegisterService(&_PhoneService_serviceDesc, srv)
}

func _PhoneService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Phone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phone.PhoneService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).Create(ctx, req.(*Phone))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phone.PhoneService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_GetByPhoneName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPhoneNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).GetByPhoneName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phone.PhoneService/GetByPhoneName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).GetByPhoneName(ctx, req.(*GetByPhoneNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phone.PhoneService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Phone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phone.PhoneService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).Update(ctx, req.(*Phone))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phone.PhoneService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).Delete(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhoneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "phone.PhoneService",
	HandlerType: (*PhoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PhoneService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _PhoneService_GetById_Handler,
		},
		{
			MethodName: "GetByPhoneName",
			Handler:    _PhoneService_GetByPhoneName_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _PhoneService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PhoneService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PhoneService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phone.proto",
}

func (m *Phone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Phone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Phone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedUp) > 0 {
		i -= len(m.CreatedUp)
		copy(dAtA[i:], m.CreatedUp)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.CreatedUp)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Memory != 0 {
		i = encodeVarintPhone(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x30
	}
	if m.Ram != 0 {
		i = encodeVarintPhone(dAtA, i, uint64(m.Ram))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneName) > 0 {
		i -= len(m.PhoneName)
		copy(dAtA[i:], m.PhoneName)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.PhoneName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		i -= len(m.Limit)
		copy(dAtA[i:], m.Limit)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.Limit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetByPhoneNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByPhoneNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByPhoneNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneName) > 0 {
		i -= len(m.PhoneName)
		copy(dAtA[i:], m.PhoneName)
		i = encodeVarintPhone(dAtA, i, uint64(len(m.PhoneName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllPhones) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPhones) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPhones) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phone) > 0 {
		for iNdEx := len(m.Phone) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Phone[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhone(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Phone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	l = len(m.PhoneName)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	if m.Ram != 0 {
		n += 1 + sovPhone(uint64(m.Ram))
	}
	if m.Memory != 0 {
		n += 1 + sovPhone(uint64(m.Memory))
	}
	l = len(m.CreatedUp)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	l = len(m.Limit)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetByPhoneNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneName)
	if l > 0 {
		n += 1 + l + sovPhone(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllPhones) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Phone) > 0 {
		for _, e := range m.Phone {
			l = e.Size()
			n += 1 + l + sovPhone(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPhone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhone(x uint64) (n int) {
	return sovPhone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Phone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ram", wireType)
			}
			m.Ram = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ram |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedUp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedUp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByPhoneNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByPhoneNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByPhoneNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPhones) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPhones: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPhones: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = append(m.Phone, &Phone{})
			if err := m.Phone[len(m.Phone)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhone = fmt.Errorf("proto: unexpected end of group")
)
